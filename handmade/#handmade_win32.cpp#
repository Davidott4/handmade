

#include <iostream>
#include <Windows.h>

using namespace std;

#define internal static
#define local_persist static
#define global_variable static

//TODO: This is global for now
global_variable bool Running;


internal void Win32ResizeDIBSection(int Width, int Height)
{
      HBITMAP  CreateDIBSection(
		HDC        hdc,
		const BITMAPINFO *pbmi,
		UINT       iUsage,
		VOID       **ppvBits,
		HANDLE     hSection,
		DWORD      dwOffset
		);

}

internal void Win32UpdateWindow(HWND Window,int X, int Y, int Width, int Height)
{
	 StretchDIBits
	 (
		HDC        hdc,
		int        XDest,
		int        YDest,
		int        nDestWidth,
		int        nDestHeight,
		int        XSrc,
		int        YSrc,
		int        nSrcWidth,
		int        nSrcHeight,
		const VOID       *lpBits,
		const BITMAPINFO *lpBitsInfo,
		UINT       iUsage,
		DWORD      dwRop
		);
}

LRESULT CALLBACK Win32MainWindowCallback(HWND Window,UINT Message,WPARAM WParam,LPARAM LParam)
{
	LRESULT Result =0 ;


	switch (Message)
	{
		case WM_SIZE:
		{
			RECT  ClientRect;
			PAINTSTRUCT Paint;
			GetClientRect(Window, &ClientRect);
			int Height = Paint.rcPaint.bottom - Paint.rcPaint.top;
			int Width = Paint.rcPaint.right - Paint.rcPaint.left;
			Win32ResizeDIBSection(Width, Height);
			OutputDebugStringA(" WM_SIZE\n");
		}break;

		case WM_DESTROY:
		{
			//TODO Handlw with message 
			Running = false;
			OutputDebugStringA(" WM_DESTROY\n");
		}break;

		case WM_CLOSE:
		{
			//TODO Handle recreate window
			Running = false;
			OutputDebugStringA(" WM_CLOSE\n");
		}break;

		case WM_ACTIVATEAPP:
		{
			OutputDebugStringA(" WM_ACTIVATEAPP\n");
		}break;
		case WM_PAINT:
		{
			PAINTSTRUCT Paint;
			HDC DeviceContext = BeginPaint(Window, &Paint);
			
			int X = Paint.rcPaint.left;
			int Y = Paint.rcPaint.top;
			int Height = Paint.rcPaint.bottom - Paint.rcPaint.top;
			int Width = Paint.rcPaint.right - Paint.rcPaint.left;
			Win32UpdateWindow(Window,X,Y, Width, Height);
			PatBlt(DeviceContext,X, Y, Width, Height, WHITENESS);

			EndPaint(Window, &Paint);
		}break;
		default:
		{
			OutputDebugStringA(" LRESULT CALLBACK: Nothing\n");
			Result = DefWindowProc(Window, Message, WParam, LParam);
		}break;
	}

	return (Result);
}



int CALLBACK WinMain(HINSTANCE Instance, HINSTANCE PrevInstance, LPSTR CommandLine, int showcode)
{

	//TODO : Check if Redraw/Vreraw/OwnDC still matter
	WNDCLASS WindowClass = {};
	WindowClass.style = CS_OWNDC | CS_HREDRAW | CS_VREDRAW;
	WindowClass.lpfnWndProc = Win32MainWindowCallback;
	WindowClass.hInstance = Instance;
//	WindowClass.hIcon;
//	WindowClass.lpszMenuName;
	WindowClass.lpszClassName = "HandmadeHeroWindowClass";

	if (RegisterClass(&WindowClass))
	{
		HWND WindowHandle = CreateWindowEx(
			 0,
			 WindowClass.lpszClassName,
			 "Handmade Hero",
			 WS_OVERLAPPEDWINDOW | WS_VISIBLE,
			 CW_USEDEFAULT,
			 CW_USEDEFAULT,
			 CW_USEDEFAULT,
			 CW_USEDEFAULT,
			 0,
			 0,
			 Instance,
			 0
			);
		if (WindowHandle)
		{
			Running = true;
			MSG Message;
			while (Running);
			{
				 BOOL MessageResult = GetMessage(&Message, 0, 0, 0);
				 if (MessageResult > 0)
				 {
					 TranslateMessage(&Message);
					 DispatchMessageA(&Message);
				 }

			}
		}
		else
		{
			//TODO : Logging Failure
		}

	}
	else
	{
		//TODO :Logging atom return  failure (1)

	}


	return 0;
}
